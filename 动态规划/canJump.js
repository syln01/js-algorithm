/**
 * 给你一个非负整数数组 nums ，你最初位于数组的 第一个下标 。
 * 数组中的每个元素代表你在该位置可以跳跃的最大长度。

判断你是否能够到达最后一个下标，如果可以，返回 true ；否则，返回 false 。

 

示例 1：

输入：nums = [2,3,1,1,4]
输出：true
解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。
示例 2：

输入：nums = [3,2,1,0,4]
输出：false
解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。
 

提示：

1 <= nums.length <= 104
0 <= nums[i] <= 105
 */
/**
 * 
 * 这一题乍一看每个元素每种路径都要尝试一遍，但是实际上不然
 * 每一个元素的值都代表他最远走到哪，由于可以自由选择，所以大的值是可以覆盖小的值的
 * 所以贪心选最大的就行
 */
const canJump=nums=>{
  const len=nums.length
  let max=0;
  for(let i=0;i<len&&i<=max;i++){
    //判断一下右边界是否覆盖了当前遍历点
    max=Math.max(max,i+nums[i])//max代表右边界最大延伸到哪里
    if(max>=len-1)return true//注意i是从0开始的所以是小于len-1
  }
  return false
}