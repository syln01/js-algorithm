/**
 * 200. 岛屿数量
给你一个由 '1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。
岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。
此外，你可以假设该网格的四条边均被水包围。
示例 1：

输入：grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
输出：1
示例 2：

输入：grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
输出：3
 
提示：

m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] 的值为 '0' 或 '1'
 */
const numIslands=grid=>{
  let count=0;
  const dfs= (x,y)=>{
    //越界或者不是陆地则退出递归，但是这种其实效率稍微差点；因为先进入了函数再判断
      if(x<0||y<0||x>=grid.length||y>=grid[0].length||grid[x][y]==='0')return
      grid[x][y]='0'//将已经搜索过的置为0，避免重复搜索
      dfs(x-1,y)
      dfs(x+1,y)
      dfs(x,y+1)
      dfs(x,y-1)
  }
  for(let i=0;i<grid.length;i++){
    for(let j=0;j<grid[0].length;j++){
      if(grid[i][j]==='1'){
        dfs(i,j)
        count++
      }
    }
  }
  return count
}